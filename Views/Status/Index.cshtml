@using Newtonsoft.Json
@{
    ViewData["Title"] = "Status Tree";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/themes/default/style.min.css" />
    <style>
        .badge-identifier {
            display: inline-block;
            margin-right: 5px;
            padding: 5px;
            border-radius: 5px;
            background-color: #16a085; /* Dark teal */
            color: #ffffff; /* White */
        }

        #statusTree ul {
            margin-bottom: 15px; /* Add vertical spacing between list items */
        }

        h2 {
            font-size: 28px;
            font-weight: bold;
            color: #333; /* Adjust color as per your theme */
            padding: 10px 20px;
            background-color: #f0f0f0; /* Light background color */
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); /* Optional: Adds a subtle shadow */
            margin-bottom: 20px; /* Vertical spacing */
            text-align: center;
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Status Tree</h2>
        <div id="statusTree" class="border rounded p-3 bg-light"></div>
    </div>

    @section scripts {
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jstree/3.3.12/jstree.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>

        <script>
            $(document).ready(function() {
            const connection = new signalR.HubConnectionBuilder()
                .withUrl("https://localhost:57519/statusHub")
                .build();
        
            function fetchInitialData() {
                return $.ajax({
                    url: 'https://localhost:57519/api/Statuses/GetStatuses',
                    method: 'GET',
                    dataType: 'json'
                });
            }
        
            function constructTreeData(statuses) {
                const treeData = [];
        
                const submittedStatuses = statuses.filter(status => status.EventName === 'NewRsiMessageSubmitted.IntegrationEvent');
        
                submittedStatuses.forEach(sub => {
                    const recStatus = statuses.find(status => status.Identifier === sub.Identifier && status.EventName === 'NewRsiMessageRecieved.IntegrationEvent');
        
                    const submittedNode = {
                        text: `<div class="badge badge-primary badge-identifier">Submitted: ${sub.Identifier}</div>`,
                        icon: "jstree-file"
                    };
        
                    if (recStatus) {
                        const receivedNode = {
                            text: `<div class="badge badge-info badge-identifier">Received: ${recStatus.Identifier}</div>`,
                            icon: "jstree-folder",
                            children: [submittedNode]
                        };
        
                        const pubStatus = statuses.find(status => status.Identifier === sub.Identifier && status.EventName ===  'RsiMessagePublished.IntegrationEvent');
                        if (pubStatus) {
                            const publishedNode = {
                                text: `<div class="badge badge-success badge-identifier">Published: ${pubStatus.Identifier}</div>`,
                                icon: "jstree-folder",
                                children: [receivedNode]
                            };
                            treeData.push(publishedNode);
                        } else {
                            treeData.push(receivedNode);
                        }
                    } else {
                        treeData.push(submittedNode);
                    }
                });
        
                return treeData;
            }
        
            function initializeTree(treeData) {
                $('#statusTree').jstree({
                    'core': {
                        'data': treeData
                    },
                    "plugins": ["types"],
                    "types": {
                        "default": {
                            "icon": "jstree-folder"
                        },
                        "file": {
                            "icon": "jstree-file"
                        }
                    }
                });
            }
        
            function updateTree() {
                fetchInitialData().done(function(statuses) {
                    const treeData = constructTreeData(statuses);
                    
                    // Destroy the current instance of jstree
                    $('#statusTree').jstree("destroy").empty();
                    
                    // Initialize jstree with new data
                    initializeTree(treeData);
        
                    // Refresh the page 
                    location.reload();
                });
            }
        
            // Initial tree load
            const initialStatuses = @Html.Raw(JsonConvert.SerializeObject(Model));
            const initialTreeData = constructTreeData(initialStatuses);
            initializeTree(initialTreeData);
        
            // Start the SignalR connection
            connection.start().then(() => {
                console.log("Connected to SignalR hub");
        
                // Subscribe to the SignalR events after the connection is established
                connection.on("SubmittedStatusUpdate", () => {
                    updateTree();
                });
                connection.on("ReceivedStatusUpdate", () => {
                    updateTree();
                });
                connection.on("PublishedStatusUpdate", () => {
                    updateTree();
                });
            }).catch(err => console.error(err.toString()));
        });

        </script>
    }
</body>
</html>
