@using Newtonsoft.Json
@{
    ViewData["Title"] = "Status Tree";
}

<!DOCTYPE html>
<html>
<head>
    <title>@ViewData["Title"]</title>
    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/css/bootstrap.min.css">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.css">
    <style>
        body {
            background-color: #000000c2; 
        }
        .badge-identifier {
            display: inline-block;
            margin-right: 5px;
            padding: 5px;
            border-radius: 5px;
            background-color: #16a085; /* Dark teal */
            color: #ffffff; /* White */
        }
        .accordion-header {
            font-size: 18px;
            font-weight: bold;
            cursor: pointer;
            text-align: left;
        }
        .accordion-content {
            display: none;
        }
        .accordion-content table {
            width: 100%;
            border-collapse: collapse;
        }
        .accordion-content table th,
        .accordion-content table td {
            border: 1px solid #ddd;
            padding: 8px;
        }
        h2 {
            font-size: 28px;
            font-weight: bold;
            color: #333; 
            padding: 10px 20px;
            background-color: #f0f0f0; 
            border-radius: 6px;
            box-shadow: 0 2px 4px rgba(0, 0, 0, 0.1); 
            margin-bottom: 20px; /* Vertical spacing */
            text-align: center;
            border: 2px solid #ddd; /* Add border to the title box */
        }
    </style>
</head>
<body>
    <div class="container mt-5">
        <h2 class="mb-4 text-center">Status Tree</h2>
        <div id="statusAccordion" class="border rounded p-3 bg-light"></div>
    </div>

    @section scripts {
        <script src="https://code.jquery.com/jquery-3.5.1.min.js"></script>
        <script src="https://stackpath.bootstrapcdn.com/bootstrap/4.5.2/js/bootstrap.bundle.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jqueryui/1.12.1/jquery-ui.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/microsoft-signalr/5.0.9/signalr.min.js"></script>

        <script>
            $(document).ready(function() {
                const connection = new signalR.HubConnectionBuilder()
                    .withUrl("https://localhost:54278/statusHub")
                    .build();

                function fetchInitialData() {
                    return $.ajax({
                        url: 'https://localhost:54278/api/Statuses/GetStatuses',
                        method: 'GET',
                        dataType: 'json'
                    });
                }

                function constructAccordionContent(statuses) {
                    const accordionContent = [];

                    const submittedStatuses = statuses.filter(status => status.EventName === 'NewRsiMessageSubmitted.IntegrationEvent');

                    submittedStatuses.forEach(sub => {
                        const recStatus = statuses.find(status => status.Identifier === sub.Identifier && status.EventName === 'NewRsiMessageRecieved.IntegrationEvent');
                        const pubStatus = statuses.find(status => status.Identifier === sub.Identifier && status.EventName === 'RsiMessagePublished.IntegrationEvent');

                        const header = `<div class="accordion-header badge badge-success badge-identifier">Published: ${pubStatus ? pubStatus.Identifier : 'Not Published'}</div>`;
                        const content = `
                            <div class="accordion-content">
                                <table class="table table-bordered">
                                    <thead>
                                        <tr>
                                            <th>Event ID</th>
                                            <th>Event Name</th>
                                            <th>Identifier</th>
                                            <th>CreationTime</th>
                                            <th>Transaction ID</th>
                                        </tr>
                                    </thead>
                                    <tbody>
                                        <tr>
                                            <td>${sub.EventId}</td>
                                            <td data-identifier="Test">${sub.EventName}</td>
                                            <td>${sub.Identifier}</td>
                                            <td>${sub.CreationTime}</td>
                                            <td>${sub.TransactionId}</td>
                                        </tr>
                                        ${recStatus ? `
                                            <tr>
                                                <td>${recStatus.EventId}</td>
                                                <td data-identifier="Test">${recStatus.EventName}</td>
                                                <td>${recStatus.Identifier}</td>
                                                <td>${recStatus.CreationTime}</td>
                                                <td>${recStatus.TransactionId}</td>
                                            </tr>` : ''}
                                        ${pubStatus ? `
                                            <tr>
                                                <td>${pubStatus.EventId}</td>
                                                <td>${pubStatus.EventName}</td>
                                                <td>${pubStatus.Identifier}</td>
                                                <td>${pubStatus.CreationTime}</td>
                                                <td>${pubStatus.TransactionId}</td>
                                            </tr>` : ''}
                                    </tbody>
                                </table>
                            </div>
                        `;

                        accordionContent.push({ header, content });
                    });

                    return accordionContent;
                }

                function initializeAccordion(accordionContent) {
                    const $accordion = $('#statusAccordion');
                    $accordion.empty();

                    accordionContent.forEach(item => {
                        $accordion.append(item.header);
                        $accordion.append(item.content);
                    });

                    $accordion.accordion({
                        header: ".accordion-header",
                        collapsible: true,
                        active: false
                    });
                }

                function updateAccordion() {
                    fetchInitialData().done(function(statuses) {
                        const accordionContent = constructAccordionContent(statuses);
                        initializeAccordion(accordionContent);
                        location.reload();
                    });
                }

                // Initial accordion load
                const initialStatuses = @Html.Raw(JsonConvert.SerializeObject(Model));
                const initialAccordionContent = constructAccordionContent(initialStatuses);
                initializeAccordion(initialAccordionContent);

                // Start the SignalR connection
                connection.start().then(() => {
                    console.log("Connected to SignalR hub");

                    // Subscribe to the SignalR events after the connection is established
                    connection.on("SubmittedStatusUpdate", () => {
                        updateAccordion();
                    });
                    connection.on("ReceivedStatusUpdate", () => {
                        updateAccordion();
                    });
                    connection.on("PublishedStatusUpdate", () => {
                        updateAccordion();
                    });

                    connection.on("StoppedNamedConsumer", (data) => {
                        console.log("StoppedNamedConsumer event received:", data);
                        const identifier = data.consumerId;
                        // alert("Stop event received for consumer: " + identifier);                        
                        const eventNameCell = $(`td:nth-child(2)`);
                        eventNameCell.css({ "background-color": "red" });
                    });

                    connection.on("RestartedNamedConsumer", (data) => {
                        console.log("RestartedNamedConsumer event received:", data);
                        const identifier = data.ConsumerId;
                        // alert("Restart event received for consumer: " + identifier);
                        const eventNameCell = $(`td:nth-child(2)`);
                        eventNameCell.css({ "background-color": "white" });
                    });
                }).catch(err => console.error(err.toString()));
            });
        </script>
    }
</body>
</html>
